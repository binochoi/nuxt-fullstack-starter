import{C as e,D as t,a as n,b as r,s}from"../routes/api/auth/_...all_.mjs";import"../nitro/nitro.mjs";import"node:process";import"cloudflare:workers";import"node:events";import"node:buffer";import"node:timers";import"node:async_hooks";import"node:stream";class BunSqliteAdapter{get supportsCreateIfNotExists(){return!0}get supportsTransactionalDdl(){return!1}get supportsReturning(){return!0}async acquireMigrationLock(){}async releaseMigrationLock(){}get supportsOutput(){return!0}}class BunSqliteDriver{#e;#t=new ConnectionMutex;#n;#r;constructor(e){this.#e={...e}}async init(){this.#n=this.#e.database,this.#r=new BunSqliteConnection(this.#n),this.#e.onCreateConnection&&await this.#e.onCreateConnection(this.#r)}async acquireConnection(){return await this.#t.lock(),this.#r}async beginTransaction(t){await t.executeQuery(e.raw("begin"))}async commitTransaction(t){await t.executeQuery(e.raw("commit"))}async rollbackTransaction(t){await t.executeQuery(e.raw("rollback"))}async releaseConnection(){this.#t.unlock()}async destroy(){this.#n?.close()}}class BunSqliteConnection{#n;constructor(e){this.#n=e}executeQuery(e){const{sql:t,parameters:n}=e,r=this.#n.prepare(t);return Promise.resolve({rows:r.all(n)})}async*streamQuery(){throw new Error("Streaming query is not supported by SQLite driver.")}}class ConnectionMutex{#s;#a;async lock(){for(;this.#s;)await this.#s;this.#s=new Promise(e=>{this.#a=e})}unlock(){const e=this.#a;this.#s=void 0,this.#a=void 0,e?.()}}class BunSqliteIntrospector{#n;constructor(e){this.#n=e}async getSchemas(){return[]}async getTables(e={withInternalKyselyTables:!1}){let t=this.#n.selectFrom("sqlite_schema").where("type","=","table").where("name","not like","sqlite_%").select("name").$castTo();e.withInternalKyselyTables||(t=t.where("name","!=",n).where("name","!=",r));const s=await t.execute();return Promise.all(s.map(({name:e})=>this.#i(e)))}async getMetadata(e){return{tables:await this.getTables(e)}}async#i(e){const t=this.#n,n=await t.selectFrom("sqlite_master").where("name","=",e).select("sql").$castTo().execute(),r=n[0]?.sql?.split(/[\(\),]/)?.find(e=>e.toLowerCase().includes("autoincrement"))?.split(/\s+/)?.[0]?.replace(/["`]/g,"");return{name:e,columns:(await t.selectFrom(s`pragma_table_info(${e})`.as("table_info")).select(["name","type","notnull","dflt_value"]).execute()).map(e=>({name:e.name,dataType:e.type,isNullable:!e.notnull,isAutoIncrementing:e.name===r,hasDefaultValue:null!=e.dflt_value})),isView:!0}}}class BunSqliteQueryCompiler extends t{getCurrentParameterPlaceholder(){return"?"}getLeftIdentifierWrapper(){return'"'}getRightIdentifierWrapper(){return'"'}getAutoIncrement(){return"autoincrement"}}class BunSqliteDialect{#e;constructor(e){this.#e={...e}}createDriver(){return new BunSqliteDriver(this.#e)}createQueryCompiler(){return new BunSqliteQueryCompiler}createAdapter(){return new BunSqliteAdapter}createIntrospector(e){return new BunSqliteIntrospector(e)}}export{BunSqliteAdapter,BunSqliteDialect,BunSqliteDriver,BunSqliteIntrospector,BunSqliteQueryCompiler};
//# sourceMappingURL=bun-sqlite-dialect.mjs.map
